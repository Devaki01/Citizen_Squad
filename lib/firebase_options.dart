// File generated by FlutterFire CLI.
// ignore_for_file: lines_longer_than_80_chars, avoid_classes_with_only_static_members
import 'package:firebase_core/firebase_core.dart' show FirebaseOptions;
import 'package:flutter/foundation.dart'
    show defaultTargetPlatform, kIsWeb, TargetPlatform;

/// Default [FirebaseOptions] for use with your Firebase apps.
///
/// Example:
/// ```dart
/// import 'firebase_options.dart';
/// // ...
/// await Firebase.initializeApp(
///   options: DefaultFirebaseOptions.currentPlatform,
/// );
/// ```
class DefaultFirebaseOptions {
  static FirebaseOptions get currentPlatform {
    if (kIsWeb) {
      return web;
    }
    switch (defaultTargetPlatform) {
      case TargetPlatform.android:
        return android;
      case TargetPlatform.iOS:
        return ios;
      case TargetPlatform.macOS:
        return macos;
      case TargetPlatform.windows:
        return windows;
      case TargetPlatform.linux:
        throw UnsupportedError(
          'DefaultFirebaseOptions have not been configured for linux - '
          'you can reconfigure this by running the FlutterFire CLI again.',
        );
      default:
        throw UnsupportedError(
          'DefaultFirebaseOptions are not supported for this platform.',
        );
    }
  }

  static const FirebaseOptions web = FirebaseOptions(
    apiKey: 'WEB_API_KEY',
    appId: 'WEB_APP_ID',
    messagingSenderId: 'WEB_MESSAGING_SENDER_ID',
    projectId: 'WEB_PROJECT_ID',
    authDomain: 'WEB_AUTH_DOMAIN',
    databaseURL: 'WEB_DATABASE_URL',
    storageBucket: 'WEB_STORAGE_BUCKET',
    measurementId: 'WEB_MEASUREMENT_ID',
  );

  static const FirebaseOptions android = FirebaseOptions(
    apiKey: 'ANDROID_API_KEY',
    appId: 'ANDROID_APP_ID',
    messagingSenderId: 'ANDROID_MESSAGING_SENDER_ID',
    projectId: 'ANDROID_PROJECT_ID',
    databaseURL: 'ANDROID_DATABASE_URL',
    storageBucket: 'ANDROID_STORAGE_BUCKET',
  );

  static const FirebaseOptions ios = FirebaseOptions(
    apiKey: 'IOS_API_KEY',
    appId: 'IOS_APP_ID',
    messagingSenderId: 'IOS_MESSAGING_SENDER_ID',
    projectId: 'IOS_PROJECT_ID',
    databaseURL: 'IOS_DATABASE_URL',
    storageBucket: 'IOS_STORAGE_BUCKET',
    iosBundleId: 'IOS_BUNDLE_ID',
  );

  static const FirebaseOptions macos = FirebaseOptions(
    apiKey: 'MACOS_API_KEY',
    appId: 'MACOS_APP_ID',
    messagingSenderId: 'MACOS_MESSAGING_SENDER_ID',
    projectId: 'MACOS_PROJECT_ID',
    databaseURL: 'MACOS_DATABASE_URL',
    storageBucket: 'MACOS_STORAGE_BUCKET',
    iosBundleId: 'MACOS_BUNDLE_ID',
  );

  static const FirebaseOptions windows = FirebaseOptions(
    apiKey: 'WINDOWS_API_KEY',
    appId: 'WINDOWS_APP_ID',
    messagingSenderId: 'WINDOWS_MESSAGING_SENDER_ID',
    projectId: 'WINDOWS_PROJECT_ID',
    authDomain: 'WINDOWS_AUTH_DOMAIN',
    databaseURL: 'WINDOWS_DATABASE_URL',
    storageBucket: 'WINDOWS_STORAGE_BUCKET',
    measurementId: 'WINDOWS_MEASUREMENT_ID',
  );

}
